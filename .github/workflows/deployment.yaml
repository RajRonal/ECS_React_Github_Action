name: Deploy to EC
on:
  push:
    branches: main

env:
  AWS_REGION: us-east-1
  CONTAINER_NAME: node-app
  ECS_SERVICE: node-service
  ECS_CLUSTER: node-cluster
concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: false
 
jobs:

  build-docker-and-deploy:
    needs: lint-and-test
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      - name: initialize modules
        run: npm i
      - name: build dist
        run: npm run build
#       - name: configure aws credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}
#       - name: login to ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
#       - name: build tag and push image to ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: node-repository
#           IMAGE_TAG: latest
#         run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#       - name: download task definition
#         run: |
#             aws ecs describe-task-definition --task-definition node-task --query taskDefinition > task-definition.json
#       - name: fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: task-definition.json
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.build-image.outputs.image }}
#       - name: deploy Amazon ECS
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true
